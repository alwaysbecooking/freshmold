* AI Rules Cookiecutter
This cookiecutter provides a standardized set of rules for various AI coding assistants. It helps you manage and update these rules across your projects using ~cruft~.

This project focuses on managing the *rule files*. For a deeper guide on the philosophy and techniques of AI-assisted development that this repository follows, please see [[https://github.com/alwaysbecooking/freshmold/blob/main/misc/ai-rules/AI_PLEASE_TAKE_MY_JOB.org][AI, Please Take My Job]].

** Usage
This project-agnostic cookiecutter can be used in a new or existing repository.

*** Setup
1. Navigate to your project's root directory.
2. Run the following command. You will be prompted to enter two values:
   - ~project_slug~: The name for the new directory where the AI rules will be stored (e.g., ~for_ai~).
   - ~docs_path~: The path to your project's existing documentation directory, relative to the project root (e.g., ~docs~). This is crucial for ensuring the paths within the generated rules are correct.

#+begin_src shell
cruft create \
--overwrite-if-exists \
https://github.com/alwaysbecooking/freshmold.git \
--directory="misc/ai-rules"
#+end_src

This will create:
- A directory containing the AI rules at the path specified by ~project_slug~.
- A ~.cruft.json~ file inside that directory. You should commit this file to version control to track updates.

After the initial setup, it's recommended to review the generated rules and delete any that are not relevant to your project.

*** Management and Updates
To keep your rules up-to-date with the upstream template, use the following ~cruft~ commands from your project root:

- ~cruft check~: See if updates are available.
- ~cruft diff~: View the differences between your local rules and the template.
- ~cruft update~: Apply the updates. (you might have to set ~GIT_PAGER=cat~)

If you have edited a rule file locally that also has an upstream change, ~cruft~ will insert conflict markers directly into the file. You will need to resolve these manually, much like a git merge conflict.

It's best to avoid editing the fetched rules directly. Instead, contribute changes to the upstream repository and then run ~cruft update~.

** Integrating with Your AI Agent
This cookiecutter only manages the rule files. How you integrate them is specific to the AI agent you use. The following sections provide general guidance and examples.

*** Example: ~cline~ Setup
Many AI agents, like ~cline~, use a dedicated directory (e.g., ~.clinerules~) to load rules. You can create a ~Justfile~ or ~Makefile~ to automate copying the rules from your ~docs_path~.

Here is a sample ~Justfile~ recipe. You will need to modify the paths to match your project's structure.

#+begin_src makefile
# Copies meta-rules into the .clinerules directory for cline to use.
cline-meta-ai-rules:
	@mkdir -p .clinerules
	@rg -F "^.clinerules/$" .gitignore > /dev/null || echo ".clinerules/" >> .gitignore
	@cp ./docs/for_ai/rules/meta_* ./.clinerules/
#+end_src

*** AI Ignore Files
Most AI agents support an ignore file (e.g., ~.clineignore~, ~.windsurfignore~) to prevent them from reading certain files and directories. It is highly recommended to create one at your project root.

Here is a standard set of patterns to include:

#+begin_src
# Dependencies
node_modules/
**/node_modules/
.pnp
.pnp.js

# Build outputs
/build/
/dist/
/out/

# Testing
/coverage/

# Environment variables
.env
.envrc
.env.local
.env.development.local
.env.test.local
.env.production.local

# Large data files
*.csv
*.xlsx
#+end_src
